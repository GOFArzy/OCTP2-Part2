//=======================================================
//  This code is generated by Terasic System Builder gof
//=======================================================

module DE2_115(

	//////////// LED //////////
	output		     [8:0]		LEDG,
	output		    [17:0]		LEDR,

	//////////// KEY //////////
	input 		     [3:0]		KEY,

	//////////// SW //////////
	input 		    [17:0]		SW,

	//////////// SEG7 //////////
	output		     [6:0]		HEX0,
	output		     [6:0]		HEX1,
	output		     [6:0]		HEX2,
	output		     [6:0]		HEX3,
	output		     [6:0]		HEX4,
	output		     [6:0]		HEX5,
	output		     [6:0]		HEX6,
	output		     [6:0]		HEX7
);



//=======================================================
//  REG/WIRE declarations
//=======================================================


	wire [31:0] pcOut, instructionOut;

//=======================================================
//  Structural coding
//=======================================================


    RISCV_Simplified riscv(
        .clk(~KEY[0]),
        .reset(~KEY[1]),
        .pcOut(pcOut),
        .instructionOut(instructionOut)
    );

    // Conexão com o display de 7 segmentos (exemplo simples)
    SevenSegmentDisplay ssd_pc1(
        .digit(pcOut[3:0]),
        .segments(HEX0)
    );
	 
	 SevenSegmentDisplay ssd_pc2(
        .digit(pcOut[7:4]),
        .segments(HEX1)
    );
	 
endmodule

module SevenSegmentDisplay(
    input [3:0] digit,
    output reg [6:0] segments
);
    always @(*) begin
        case(digit)
            4'b0000: segments = 7'b1000000; // 0
            4'b0001: segments = 7'b1111001; // 1
            4'b0010: segments = 7'b0100100; // 2
            4'b0011: segments = 7'b0110000; // 3
            4'b0100: segments = 7'b0011001; // 4
            4'b0101: segments = 7'b0010010; // 5
            4'b0110: segments = 7'b0000010; // 6
            4'b0111: segments = 7'b1111000; // 7
            4'b1000: segments = 7'b0000000; // 8
            4'b1001: segments = 7'b0010000; // 9
            4'b1010: segments = 7'b0001000; // A
            4'b1011: segments = 7'b0000011; // b
            4'b1100: segments = 7'b1000110; // C
            4'b1101: segments = 7'b0100001; // d
            4'b1110: segments = 7'b0000110; // E
            4'b1111: segments = 7'b0001110; // F
            default: segments = 7'b1111111; // Default off
        endcase
    end
endmodule


module ALU(
    input [31:0] srcA,
    input [31:0] srcB,
    input [3:0] aluControl,
    output reg [31:0] aluResult,
    output zero
);
    assign zero = (aluResult == 0);

    always @(*) begin
        case(aluControl)
            4'b0000: aluResult = srcA + srcB; // ADD
            4'b0001: aluResult = srcA - srcB; // SUB/BNE
            4'b0010: aluResult = srcA & srcB; // AND
            4'b0011: aluResult = srcA | srcB; // OR
            4'b0101: aluResult = srcA << srcB[4:0]; // SLL
            default: aluResult = 32'b0;
        endcase
    end
endmodule

module ControlUnit(
    input [6:0] opcode,
    input [2:0] funct3,
    input [6:0] funct7,
    output reg [3:0] aluControl,
    output reg regWrite,
    output reg aluSrc,
    output reg memWrite,
    output reg branch,
    output reg jump
);
    always @(*) begin //lh sh add or andi sll bne
        // Definir valores padrão
        aluControl = 4'b0000;
        regWrite = 0;
        aluSrc = 0;
        memWrite = 0;
        branch = 0;
        jump = 0;

        case(opcode)
            7'b0110011: begin // R-type
                regWrite = 1;
                case(funct3)
                    3'b000: aluControl = (funct7 == 7'b0000000) ? 4'b0000 : 4'b0001; // ADD/SUB
                    3'b110: aluControl = 4'b0011; // OR
                    3'b001: aluControl = 4'b0101; // SLL
                endcase
            end
            7'b0010011: begin // I-type (ADDI, ANDI)
                regWrite = 1;
                aluSrc = 1;
                case(funct3)
                    3'b000: aluControl = 4'b0000; // ADDI
                    3'b111: aluControl = 4'b0010; // ANDI
                endcase
            end
            7'b0001011: begin // Load halfword (LH)
                regWrite = 1;
                aluSrc = 1;
                aluControl = 4'b0000; // ADD
            end
            7'b0100011: begin // Store word (SW)
                memWrite = 1;
                aluSrc = 1;
                aluControl = 4'b0000; // ADD
            end
            7'b0101011: begin // Store halfword (SH)
                memWrite = 1;
                aluSrc = 1;
                aluControl = 4'b0000; // ADD
            end
            7'b1100011: begin // Branch (BNE)
                branch = 1;
                case(funct3)
                    3'b001: aluControl = 4'b0001; // BNE
                endcase
            end
            7'b1101111: begin // Jump (JAL)
                jump = 1;
            end
        endcase
    end
endmodule

module DataMemory(
    input clk,
    input memWrite,
    input [31:0] address,
    input [31:0] writeData,
    output reg [31:0] readData
);
    reg [31:0] memory [0:255];

    always @(posedge clk) begin
        if (memWrite)
            memory[address[9:2]] <= writeData;
    end

    always @(*) begin
        readData = memory[address[9:2]];
    end
endmodule

module ImmGen(
    input [31:0] instruction,
    output reg [31:0] immOut
);
    always @(*) begin
        case (instruction[6:0])
            7'b0010011, // I-type (ADDI, ANDI, ORI)
            7'b0000011, // Load (LW)
            7'b0001011: // Load halfword (LH)
                immOut = {{20{instruction[31]}}, instruction[31:20]};
            7'b0100011: // Store (SW)
                immOut = {{20{instruction[31]}}, instruction[31:25], instruction[11:7]};
            7'b0101011: // Store halfword (SH)
                immOut = {{20{instruction[31]}}, instruction[31:25], instruction[11:7]};
            7'b1100011: // Branch (BEQ, BNE)
                immOut = {{20{instruction[31]}}, instruction[7], instruction[30:25], instruction[11:8], 1'b0};
            7'b1101111: // Jump (JAL)
                immOut = {{12{instruction[31]}}, instruction[19:12], instruction[20], instruction[30:21], 1'b0};
            default: 
                immOut = 32'b0;
        endcase
    end
endmodule

module InstructionMemory(
    input [31:0] address,
    output reg [31:0] instruction
);
    reg [31:0] memory [0:255];

    initial begin
        // Carregar o programa (exemplo hardcoded)
        memory[0] = 32'b00000000000100000000000110010011; // addi x3, x0, 1
        memory[1] = 32'b00000000001000001000001000110011; // add x4, x1, x2
        memory[2] = 32'b00000000010000001010001010110011; // add x5, x1, x4
        memory[3] = 32'b00000000001100000000001100010011; // addi x6, x0, 3
        memory[4] = 32'b00000000001100001100001110110011; // sub x7, x6, x3
        memory[5] = 32'b00000000000100010000010000010011; // addi x8, x2, 1
        memory[6] = 32'b00000000001000100000010010110011; // add x9, x4, x2
        memory[7] = 32'b00000000010100010100010100110011; // sub x10, x2, x5

        // Continuar adicionando instruções conforme a necessidade do grupo 29
    end

    always @(*) begin
        instruction = memory[address[9:2]]; // Acessa a instrução na memória
    end
endmodule

module ProgramCounter(   
    input clk,
    input reset,
    input [31:0] nextPC,
    output reg [31:0] currentPC
);
    always @(posedge clk or posedge reset) begin
        if (reset)
            currentPC <= 32'b0;
        else
            currentPC <= nextPC;
    end
endmodule

module RegisterFile(
    input clk,
    input [4:0] rs1, rs2, rd,
    input [31:0] writeData,
    input regWrite,
    output [31:0] readData1, readData2
);
    reg [31:0] registers [0:31];
    
    // Leitura dos registradores
    assign readData1 = registers[rs1];
    assign readData2 = registers[rs2];
    
    // Escrita nos registradores
    always @(posedge clk) begin
        if (regWrite)
            registers[rd] <= writeData;
    end
endmodule

module RISCV_Simplified(
    input clk,
    input reset,
    output [31:0] pcOut,
    output [31:0] instructionOut
);
    wire [31:0] pcCurrent, pcNext, instruction;
    wire [31:0] regData1, regData2, aluResult, immOut, memData;
    wire [3:0] aluControl;
    wire regWrite, aluSrc, memWrite, branch, jump;

    // Instanciando os módulos
    ProgramCounter PC(
	.clk(clk),
	.reset(reset),
	.nextPC(pcNext),
	.currentPC(pcCurrent));

    InstructionMemory IM(
	.address(pcCurrent),
	.instruction(instruction));

    RegisterFile RF(
	.clk(clk),
	.rs1(instruction[19:15]),
	.rs2(instruction[24:20]), 
   .rd(instruction[11:7]),
	.writeData(memData),
	.regWrite(regWrite), 
   .readData1(regData1),
	.readData2(regData2));

    ImmGen IG(
	.instruction(instruction),
	.immOut(immOut));
    
    ControlUnit CU(
	.opcode(instruction[6:0]),
	.funct3(instruction[14:12]),
	.funct7(instruction[31:25]), 
   .aluControl(aluControl),
	.regWrite(regWrite),
	.aluSrc(aluSrc), 
   .memWrite(memWrite),
	.branch(branch),
	.jump(jump));

    ALU ALU(
	.srcA(regData1),
	.srcB(aluSrc ? immOut : regData2), 
   .aluControl(aluControl),
	.aluResult(aluResult));
    
    DataMemory DM(
	.clk(clk),
	.memWrite(memWrite),
	.address(aluResult), 
   .writeData(regData2),
	.readData(memData));

    // Ligação do PC com a ALU
    assign pcNext = jump ? (pcCurrent + immOut) : (branch ? (pcCurrent + immOut) : (pcCurrent + 4));
    
    assign pcOut = pcCurrent;
    assign instructionOut = instruction;

endmodule